// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/generativelabs/btcserver/internal/db/ent/globalstate"
)

// GlobalStateCreate is the builder for creating a GlobalState entity.
type GlobalStateCreate struct {
	config
	mutation *GlobalStateMutation
	hooks    []Hook
}

// SetKey sets the "Key" field.
func (gsc *GlobalStateCreate) SetKey(s string) *GlobalStateCreate {
	gsc.mutation.SetKey(s)
	return gsc
}

// SetValue sets the "Value" field.
func (gsc *GlobalStateCreate) SetValue(s string) *GlobalStateCreate {
	gsc.mutation.SetValue(s)
	return gsc
}

// SetCreateAt sets the "CreateAt" field.
func (gsc *GlobalStateCreate) SetCreateAt(i int64) *GlobalStateCreate {
	gsc.mutation.SetCreateAt(i)
	return gsc
}

// SetUpdateAt sets the "UpdateAt" field.
func (gsc *GlobalStateCreate) SetUpdateAt(i int64) *GlobalStateCreate {
	gsc.mutation.SetUpdateAt(i)
	return gsc
}

// SetNillableUpdateAt sets the "UpdateAt" field if the given value is not nil.
func (gsc *GlobalStateCreate) SetNillableUpdateAt(i *int64) *GlobalStateCreate {
	if i != nil {
		gsc.SetUpdateAt(*i)
	}
	return gsc
}

// Mutation returns the GlobalStateMutation object of the builder.
func (gsc *GlobalStateCreate) Mutation() *GlobalStateMutation {
	return gsc.mutation
}

// Save creates the GlobalState in the database.
func (gsc *GlobalStateCreate) Save(ctx context.Context) (*GlobalState, error) {
	gsc.defaults()
	return withHooks(ctx, gsc.sqlSave, gsc.mutation, gsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GlobalStateCreate) SaveX(ctx context.Context) *GlobalState {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GlobalStateCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GlobalStateCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GlobalStateCreate) defaults() {
	if _, ok := gsc.mutation.UpdateAt(); !ok {
		v := globalstate.DefaultUpdateAt
		gsc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GlobalStateCreate) check() error {
	if _, ok := gsc.mutation.Key(); !ok {
		return &ValidationError{Name: "Key", err: errors.New(`ent: missing required field "GlobalState.Key"`)}
	}
	if _, ok := gsc.mutation.Value(); !ok {
		return &ValidationError{Name: "Value", err: errors.New(`ent: missing required field "GlobalState.Value"`)}
	}
	if _, ok := gsc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "CreateAt", err: errors.New(`ent: missing required field "GlobalState.CreateAt"`)}
	}
	if _, ok := gsc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "UpdateAt", err: errors.New(`ent: missing required field "GlobalState.UpdateAt"`)}
	}
	return nil
}

func (gsc *GlobalStateCreate) sqlSave(ctx context.Context) (*GlobalState, error) {
	if err := gsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gsc.mutation.id = &_node.ID
	gsc.mutation.done = true
	return _node, nil
}

func (gsc *GlobalStateCreate) createSpec() (*GlobalState, *sqlgraph.CreateSpec) {
	var (
		_node = &GlobalState{config: gsc.config}
		_spec = sqlgraph.NewCreateSpec(globalstate.Table, sqlgraph.NewFieldSpec(globalstate.FieldID, field.TypeInt))
	)
	if value, ok := gsc.mutation.Key(); ok {
		_spec.SetField(globalstate.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := gsc.mutation.Value(); ok {
		_spec.SetField(globalstate.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := gsc.mutation.CreateAt(); ok {
		_spec.SetField(globalstate.FieldCreateAt, field.TypeInt64, value)
		_node.CreateAt = value
	}
	if value, ok := gsc.mutation.UpdateAt(); ok {
		_spec.SetField(globalstate.FieldUpdateAt, field.TypeInt64, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// GlobalStateCreateBulk is the builder for creating many GlobalState entities in bulk.
type GlobalStateCreateBulk struct {
	config
	err      error
	builders []*GlobalStateCreate
}

// Save creates the GlobalState entities in the database.
func (gscb *GlobalStateCreateBulk) Save(ctx context.Context) ([]*GlobalState, error) {
	if gscb.err != nil {
		return nil, gscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GlobalState, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GlobalStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GlobalStateCreateBulk) SaveX(ctx context.Context) []*GlobalState {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GlobalStateCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GlobalStateCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}
