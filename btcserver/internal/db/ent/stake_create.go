// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/generativelabs/btcserver/internal/db/ent/stake"
)

// StakeCreate is the builder for creating a Stake entity.
type StakeCreate struct {
	config
	mutation *StakeMutation
	hooks    []Hook
}

// SetStaker sets the "staker" field.
func (sc *StakeCreate) SetStaker(s string) *StakeCreate {
	sc.mutation.SetStaker(s)
	return sc
}

// SetTx sets the "tx" field.
func (sc *StakeCreate) SetTx(s string) *StakeCreate {
	sc.mutation.SetTx(s)
	return sc
}

// SetStart sets the "start" field.
func (sc *StakeCreate) SetStart(i int64) *StakeCreate {
	sc.mutation.SetStart(i)
	return sc
}

// SetDuration sets the "duration" field.
func (sc *StakeCreate) SetDuration(i int64) *StakeCreate {
	sc.mutation.SetDuration(i)
	return sc
}

// SetAmount sets the "amount" field.
func (sc *StakeCreate) SetAmount(i int64) *StakeCreate {
	sc.mutation.SetAmount(i)
	return sc
}

// SetReceiver sets the "receiver" field.
func (sc *StakeCreate) SetReceiver(s string) *StakeCreate {
	sc.mutation.SetReceiver(s)
	return sc
}

// SetFinalized sets the "finalized" field.
func (sc *StakeCreate) SetFinalized(b bool) *StakeCreate {
	sc.mutation.SetFinalized(b)
	return sc
}

// SetEnd sets the "end" field.
func (sc *StakeCreate) SetEnd(b bool) *StakeCreate {
	sc.mutation.SetEnd(b)
	return sc
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (sc *StakeCreate) SetNillableEnd(b *bool) *StakeCreate {
	if b != nil {
		sc.SetEnd(*b)
	}
	return sc
}

// SetBtcSig sets the "btc_sig" field.
func (sc *StakeCreate) SetBtcSig(s string) *StakeCreate {
	sc.mutation.SetBtcSig(s)
	return sc
}

// SetReceiverSig sets the "receiver_sig" field.
func (sc *StakeCreate) SetReceiverSig(s string) *StakeCreate {
	sc.mutation.SetReceiverSig(s)
	return sc
}

// Mutation returns the StakeMutation object of the builder.
func (sc *StakeCreate) Mutation() *StakeMutation {
	return sc.mutation
}

// Save creates the Stake in the database.
func (sc *StakeCreate) Save(ctx context.Context) (*Stake, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StakeCreate) SaveX(ctx context.Context) *Stake {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StakeCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StakeCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StakeCreate) defaults() {
	if _, ok := sc.mutation.End(); !ok {
		v := stake.DefaultEnd
		sc.mutation.SetEnd(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StakeCreate) check() error {
	if _, ok := sc.mutation.Staker(); !ok {
		return &ValidationError{Name: "staker", err: errors.New(`ent: missing required field "Stake.staker"`)}
	}
	if v, ok := sc.mutation.Staker(); ok {
		if err := stake.StakerValidator(v); err != nil {
			return &ValidationError{Name: "staker", err: fmt.Errorf(`ent: validator failed for field "Stake.staker": %w`, err)}
		}
	}
	if _, ok := sc.mutation.GetTx(); !ok {
		return &ValidationError{Name: "tx", err: errors.New(`ent: missing required field "Stake.tx"`)}
	}
	if v, ok := sc.mutation.GetTx(); ok {
		if err := stake.TxValidator(v); err != nil {
			return &ValidationError{Name: "tx", err: fmt.Errorf(`ent: validator failed for field "Stake.tx": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Stake.start"`)}
	}
	if _, ok := sc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Stake.duration"`)}
	}
	if _, ok := sc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Stake.amount"`)}
	}
	if _, ok := sc.mutation.Receiver(); !ok {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required field "Stake.receiver"`)}
	}
	if v, ok := sc.mutation.Receiver(); ok {
		if err := stake.ReceiverValidator(v); err != nil {
			return &ValidationError{Name: "receiver", err: fmt.Errorf(`ent: validator failed for field "Stake.receiver": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Finalized(); !ok {
		return &ValidationError{Name: "finalized", err: errors.New(`ent: missing required field "Stake.finalized"`)}
	}
	if _, ok := sc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Stake.end"`)}
	}
	if _, ok := sc.mutation.BtcSig(); !ok {
		return &ValidationError{Name: "btc_sig", err: errors.New(`ent: missing required field "Stake.btc_sig"`)}
	}
	if _, ok := sc.mutation.ReceiverSig(); !ok {
		return &ValidationError{Name: "receiver_sig", err: errors.New(`ent: missing required field "Stake.receiver_sig"`)}
	}
	return nil
}

func (sc *StakeCreate) sqlSave(ctx context.Context) (*Stake, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StakeCreate) createSpec() (*Stake, *sqlgraph.CreateSpec) {
	var (
		_node = &Stake{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(stake.Table, sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Staker(); ok {
		_spec.SetField(stake.FieldStaker, field.TypeString, value)
		_node.Staker = value
	}
	if value, ok := sc.mutation.GetTx(); ok {
		_spec.SetField(stake.FieldTx, field.TypeString, value)
		_node.Tx = value
	}
	if value, ok := sc.mutation.Start(); ok {
		_spec.SetField(stake.FieldStart, field.TypeInt64, value)
		_node.Start = value
	}
	if value, ok := sc.mutation.Duration(); ok {
		_spec.SetField(stake.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := sc.mutation.Amount(); ok {
		_spec.SetField(stake.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := sc.mutation.Receiver(); ok {
		_spec.SetField(stake.FieldReceiver, field.TypeString, value)
		_node.Receiver = value
	}
	if value, ok := sc.mutation.Finalized(); ok {
		_spec.SetField(stake.FieldFinalized, field.TypeBool, value)
		_node.Finalized = value
	}
	if value, ok := sc.mutation.End(); ok {
		_spec.SetField(stake.FieldEnd, field.TypeBool, value)
		_node.End = value
	}
	if value, ok := sc.mutation.BtcSig(); ok {
		_spec.SetField(stake.FieldBtcSig, field.TypeString, value)
		_node.BtcSig = value
	}
	if value, ok := sc.mutation.ReceiverSig(); ok {
		_spec.SetField(stake.FieldReceiverSig, field.TypeString, value)
		_node.ReceiverSig = value
	}
	return _node, _spec
}

// StakeCreateBulk is the builder for creating many Stake entities in bulk.
type StakeCreateBulk struct {
	config
	err      error
	builders []*StakeCreate
}

// Save creates the Stake entities in the database.
func (scb *StakeCreateBulk) Save(ctx context.Context) ([]*Stake, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stake, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StakeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StakeCreateBulk) SaveX(ctx context.Context) []*Stake {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StakeCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StakeCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
