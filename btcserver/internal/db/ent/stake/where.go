// Code generated by ent, DO NOT EDIT.

package stake

import (
	"entgo.io/ent/dialect/sql"
	"github.com/generativelabs/btcserver/internal/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldID, id))
}

// Staker applies equality check predicate on the "staker" field. It's identical to StakerEQ.
func Staker(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldStaker, v))
}

// Tx applies equality check predicate on the "tx" field. It's identical to TxEQ.
func Tx(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldTx, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldStart, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldDuration, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldAmount, v))
}

// Receiver applies equality check predicate on the "receiver" field. It's identical to ReceiverEQ.
func Receiver(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldReceiver, v))
}

// Finalized applies equality check predicate on the "finalized" field. It's identical to FinalizedEQ.
func Finalized(v bool) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldFinalized, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v bool) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldEnd, v))
}

// BtcSig applies equality check predicate on the "btc_sig" field. It's identical to BtcSigEQ.
func BtcSig(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldBtcSig, v))
}

// ReceiverSig applies equality check predicate on the "receiver_sig" field. It's identical to ReceiverSigEQ.
func ReceiverSig(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldReceiverSig, v))
}

// StakerEQ applies the EQ predicate on the "staker" field.
func StakerEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldStaker, v))
}

// StakerNEQ applies the NEQ predicate on the "staker" field.
func StakerNEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldStaker, v))
}

// StakerIn applies the In predicate on the "staker" field.
func StakerIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldStaker, vs...))
}

// StakerNotIn applies the NotIn predicate on the "staker" field.
func StakerNotIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldStaker, vs...))
}

// StakerGT applies the GT predicate on the "staker" field.
func StakerGT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldStaker, v))
}

// StakerGTE applies the GTE predicate on the "staker" field.
func StakerGTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldStaker, v))
}

// StakerLT applies the LT predicate on the "staker" field.
func StakerLT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldStaker, v))
}

// StakerLTE applies the LTE predicate on the "staker" field.
func StakerLTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldStaker, v))
}

// StakerContains applies the Contains predicate on the "staker" field.
func StakerContains(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContains(FieldStaker, v))
}

// StakerHasPrefix applies the HasPrefix predicate on the "staker" field.
func StakerHasPrefix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasPrefix(FieldStaker, v))
}

// StakerHasSuffix applies the HasSuffix predicate on the "staker" field.
func StakerHasSuffix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasSuffix(FieldStaker, v))
}

// StakerEqualFold applies the EqualFold predicate on the "staker" field.
func StakerEqualFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEqualFold(FieldStaker, v))
}

// StakerContainsFold applies the ContainsFold predicate on the "staker" field.
func StakerContainsFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContainsFold(FieldStaker, v))
}

// TxEQ applies the EQ predicate on the "tx" field.
func TxEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldTx, v))
}

// TxNEQ applies the NEQ predicate on the "tx" field.
func TxNEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldTx, v))
}

// TxIn applies the In predicate on the "tx" field.
func TxIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldTx, vs...))
}

// TxNotIn applies the NotIn predicate on the "tx" field.
func TxNotIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldTx, vs...))
}

// TxGT applies the GT predicate on the "tx" field.
func TxGT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldTx, v))
}

// TxGTE applies the GTE predicate on the "tx" field.
func TxGTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldTx, v))
}

// TxLT applies the LT predicate on the "tx" field.
func TxLT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldTx, v))
}

// TxLTE applies the LTE predicate on the "tx" field.
func TxLTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldTx, v))
}

// TxContains applies the Contains predicate on the "tx" field.
func TxContains(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContains(FieldTx, v))
}

// TxHasPrefix applies the HasPrefix predicate on the "tx" field.
func TxHasPrefix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasPrefix(FieldTx, v))
}

// TxHasSuffix applies the HasSuffix predicate on the "tx" field.
func TxHasSuffix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasSuffix(FieldTx, v))
}

// TxEqualFold applies the EqualFold predicate on the "tx" field.
func TxEqualFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEqualFold(FieldTx, v))
}

// TxContainsFold applies the ContainsFold predicate on the "tx" field.
func TxContainsFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContainsFold(FieldTx, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...int64) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...int64) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldStart, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int64) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int64) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldDuration, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldAmount, v))
}

// ReceiverEQ applies the EQ predicate on the "receiver" field.
func ReceiverEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldReceiver, v))
}

// ReceiverNEQ applies the NEQ predicate on the "receiver" field.
func ReceiverNEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldReceiver, v))
}

// ReceiverIn applies the In predicate on the "receiver" field.
func ReceiverIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldReceiver, vs...))
}

// ReceiverNotIn applies the NotIn predicate on the "receiver" field.
func ReceiverNotIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldReceiver, vs...))
}

// ReceiverGT applies the GT predicate on the "receiver" field.
func ReceiverGT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldReceiver, v))
}

// ReceiverGTE applies the GTE predicate on the "receiver" field.
func ReceiverGTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldReceiver, v))
}

// ReceiverLT applies the LT predicate on the "receiver" field.
func ReceiverLT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldReceiver, v))
}

// ReceiverLTE applies the LTE predicate on the "receiver" field.
func ReceiverLTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldReceiver, v))
}

// ReceiverContains applies the Contains predicate on the "receiver" field.
func ReceiverContains(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContains(FieldReceiver, v))
}

// ReceiverHasPrefix applies the HasPrefix predicate on the "receiver" field.
func ReceiverHasPrefix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasPrefix(FieldReceiver, v))
}

// ReceiverHasSuffix applies the HasSuffix predicate on the "receiver" field.
func ReceiverHasSuffix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasSuffix(FieldReceiver, v))
}

// ReceiverEqualFold applies the EqualFold predicate on the "receiver" field.
func ReceiverEqualFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEqualFold(FieldReceiver, v))
}

// ReceiverContainsFold applies the ContainsFold predicate on the "receiver" field.
func ReceiverContainsFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContainsFold(FieldReceiver, v))
}

// FinalizedEQ applies the EQ predicate on the "finalized" field.
func FinalizedEQ(v bool) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldFinalized, v))
}

// FinalizedNEQ applies the NEQ predicate on the "finalized" field.
func FinalizedNEQ(v bool) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldFinalized, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v bool) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v bool) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldEnd, v))
}

// BtcSigEQ applies the EQ predicate on the "btc_sig" field.
func BtcSigEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldBtcSig, v))
}

// BtcSigNEQ applies the NEQ predicate on the "btc_sig" field.
func BtcSigNEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldBtcSig, v))
}

// BtcSigIn applies the In predicate on the "btc_sig" field.
func BtcSigIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldBtcSig, vs...))
}

// BtcSigNotIn applies the NotIn predicate on the "btc_sig" field.
func BtcSigNotIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldBtcSig, vs...))
}

// BtcSigGT applies the GT predicate on the "btc_sig" field.
func BtcSigGT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldBtcSig, v))
}

// BtcSigGTE applies the GTE predicate on the "btc_sig" field.
func BtcSigGTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldBtcSig, v))
}

// BtcSigLT applies the LT predicate on the "btc_sig" field.
func BtcSigLT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldBtcSig, v))
}

// BtcSigLTE applies the LTE predicate on the "btc_sig" field.
func BtcSigLTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldBtcSig, v))
}

// BtcSigContains applies the Contains predicate on the "btc_sig" field.
func BtcSigContains(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContains(FieldBtcSig, v))
}

// BtcSigHasPrefix applies the HasPrefix predicate on the "btc_sig" field.
func BtcSigHasPrefix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasPrefix(FieldBtcSig, v))
}

// BtcSigHasSuffix applies the HasSuffix predicate on the "btc_sig" field.
func BtcSigHasSuffix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasSuffix(FieldBtcSig, v))
}

// BtcSigEqualFold applies the EqualFold predicate on the "btc_sig" field.
func BtcSigEqualFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEqualFold(FieldBtcSig, v))
}

// BtcSigContainsFold applies the ContainsFold predicate on the "btc_sig" field.
func BtcSigContainsFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContainsFold(FieldBtcSig, v))
}

// ReceiverSigEQ applies the EQ predicate on the "receiver_sig" field.
func ReceiverSigEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEQ(FieldReceiverSig, v))
}

// ReceiverSigNEQ applies the NEQ predicate on the "receiver_sig" field.
func ReceiverSigNEQ(v string) predicate.Stake {
	return predicate.Stake(sql.FieldNEQ(FieldReceiverSig, v))
}

// ReceiverSigIn applies the In predicate on the "receiver_sig" field.
func ReceiverSigIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldIn(FieldReceiverSig, vs...))
}

// ReceiverSigNotIn applies the NotIn predicate on the "receiver_sig" field.
func ReceiverSigNotIn(vs ...string) predicate.Stake {
	return predicate.Stake(sql.FieldNotIn(FieldReceiverSig, vs...))
}

// ReceiverSigGT applies the GT predicate on the "receiver_sig" field.
func ReceiverSigGT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGT(FieldReceiverSig, v))
}

// ReceiverSigGTE applies the GTE predicate on the "receiver_sig" field.
func ReceiverSigGTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldGTE(FieldReceiverSig, v))
}

// ReceiverSigLT applies the LT predicate on the "receiver_sig" field.
func ReceiverSigLT(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLT(FieldReceiverSig, v))
}

// ReceiverSigLTE applies the LTE predicate on the "receiver_sig" field.
func ReceiverSigLTE(v string) predicate.Stake {
	return predicate.Stake(sql.FieldLTE(FieldReceiverSig, v))
}

// ReceiverSigContains applies the Contains predicate on the "receiver_sig" field.
func ReceiverSigContains(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContains(FieldReceiverSig, v))
}

// ReceiverSigHasPrefix applies the HasPrefix predicate on the "receiver_sig" field.
func ReceiverSigHasPrefix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasPrefix(FieldReceiverSig, v))
}

// ReceiverSigHasSuffix applies the HasSuffix predicate on the "receiver_sig" field.
func ReceiverSigHasSuffix(v string) predicate.Stake {
	return predicate.Stake(sql.FieldHasSuffix(FieldReceiverSig, v))
}

// ReceiverSigEqualFold applies the EqualFold predicate on the "receiver_sig" field.
func ReceiverSigEqualFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldEqualFold(FieldReceiverSig, v))
}

// ReceiverSigContainsFold applies the ContainsFold predicate on the "receiver_sig" field.
func ReceiverSigContainsFold(v string) predicate.Stake {
	return predicate.Stake(sql.FieldContainsFold(FieldReceiverSig, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stake) predicate.Stake {
	return predicate.Stake(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stake) predicate.Stake {
	return predicate.Stake(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stake) predicate.Stake {
	return predicate.Stake(sql.NotPredicates(p))
}
