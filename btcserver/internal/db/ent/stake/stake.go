// Code generated by ent, DO NOT EDIT.

package stake

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the stake type in the database.
	Label = "stake"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStaker holds the string denoting the staker field in the database.
	FieldStaker = "staker"
	// FieldTx holds the string denoting the tx field in the database.
	FieldTx = "tx"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldReceiver holds the string denoting the receiver field in the database.
	FieldReceiver = "receiver"
	// FieldFinalized holds the string denoting the finalized field in the database.
	FieldFinalized = "finalized"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldBtcSig holds the string denoting the btc_sig field in the database.
	FieldBtcSig = "btc_sig"
	// FieldReceiverSig holds the string denoting the receiver_sig field in the database.
	FieldReceiverSig = "receiver_sig"
	// Table holds the table name of the stake in the database.
	Table = "stakes"
)

// Columns holds all SQL columns for stake fields.
var Columns = []string{
	FieldID,
	FieldStaker,
	FieldTx,
	FieldStart,
	FieldDuration,
	FieldAmount,
	FieldReceiver,
	FieldFinalized,
	FieldEnd,
	FieldBtcSig,
	FieldReceiverSig,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StakerValidator is a validator for the "staker" field. It is called by the builders before save.
	StakerValidator func(string) error
	// TxValidator is a validator for the "tx" field. It is called by the builders before save.
	TxValidator func(string) error
	// ReceiverValidator is a validator for the "receiver" field. It is called by the builders before save.
	ReceiverValidator func(string) error
	// DefaultEnd holds the default value on creation for the "end" field.
	DefaultEnd bool
)

// OrderOption defines the ordering options for the Stake queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStaker orders the results by the staker field.
func ByStaker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStaker, opts...).ToFunc()
}

// ByTx orders the results by the tx field.
func ByTx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTx, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByReceiver orders the results by the receiver field.
func ByReceiver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiver, opts...).ToFunc()
}

// ByFinalized orders the results by the finalized field.
func ByFinalized(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalized, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByBtcSig orders the results by the btc_sig field.
func ByBtcSig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBtcSig, opts...).ToFunc()
}

// ByReceiverSig orders the results by the receiver_sig field.
func ByReceiverSig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverSig, opts...).ToFunc()
}
