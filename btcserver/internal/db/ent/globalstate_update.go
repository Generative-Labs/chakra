// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/generativelabs/btcserver/internal/db/ent/globalstate"
	"github.com/generativelabs/btcserver/internal/db/ent/predicate"
)

// GlobalStateUpdate is the builder for updating GlobalState entities.
type GlobalStateUpdate struct {
	config
	hooks    []Hook
	mutation *GlobalStateMutation
}

// Where appends a list predicates to the GlobalStateUpdate builder.
func (gsu *GlobalStateUpdate) Where(ps ...predicate.GlobalState) *GlobalStateUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetKey sets the "Key" field.
func (gsu *GlobalStateUpdate) SetKey(s string) *GlobalStateUpdate {
	gsu.mutation.SetKey(s)
	return gsu
}

// SetNillableKey sets the "Key" field if the given value is not nil.
func (gsu *GlobalStateUpdate) SetNillableKey(s *string) *GlobalStateUpdate {
	if s != nil {
		gsu.SetKey(*s)
	}
	return gsu
}

// SetValue sets the "Value" field.
func (gsu *GlobalStateUpdate) SetValue(u uint64) *GlobalStateUpdate {
	gsu.mutation.ResetValue()
	gsu.mutation.SetValue(u)
	return gsu
}

// SetNillableValue sets the "Value" field if the given value is not nil.
func (gsu *GlobalStateUpdate) SetNillableValue(u *uint64) *GlobalStateUpdate {
	if u != nil {
		gsu.SetValue(*u)
	}
	return gsu
}

// AddValue adds u to the "Value" field.
func (gsu *GlobalStateUpdate) AddValue(u int64) *GlobalStateUpdate {
	gsu.mutation.AddValue(u)
	return gsu
}

// Mutation returns the GlobalStateMutation object of the builder.
func (gsu *GlobalStateUpdate) Mutation() *GlobalStateMutation {
	return gsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GlobalStateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gsu.sqlSave, gsu.mutation, gsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GlobalStateUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GlobalStateUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GlobalStateUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gsu *GlobalStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(globalstate.Table, globalstate.Columns, sqlgraph.NewFieldSpec(globalstate.FieldID, field.TypeInt))
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.Key(); ok {
		_spec.SetField(globalstate.FieldKey, field.TypeString, value)
	}
	if value, ok := gsu.mutation.Value(); ok {
		_spec.SetField(globalstate.FieldValue, field.TypeUint64, value)
	}
	if value, ok := gsu.mutation.AddedValue(); ok {
		_spec.AddField(globalstate.FieldValue, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globalstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gsu.mutation.done = true
	return n, nil
}

// GlobalStateUpdateOne is the builder for updating a single GlobalState entity.
type GlobalStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GlobalStateMutation
}

// SetKey sets the "Key" field.
func (gsuo *GlobalStateUpdateOne) SetKey(s string) *GlobalStateUpdateOne {
	gsuo.mutation.SetKey(s)
	return gsuo
}

// SetNillableKey sets the "Key" field if the given value is not nil.
func (gsuo *GlobalStateUpdateOne) SetNillableKey(s *string) *GlobalStateUpdateOne {
	if s != nil {
		gsuo.SetKey(*s)
	}
	return gsuo
}

// SetValue sets the "Value" field.
func (gsuo *GlobalStateUpdateOne) SetValue(u uint64) *GlobalStateUpdateOne {
	gsuo.mutation.ResetValue()
	gsuo.mutation.SetValue(u)
	return gsuo
}

// SetNillableValue sets the "Value" field if the given value is not nil.
func (gsuo *GlobalStateUpdateOne) SetNillableValue(u *uint64) *GlobalStateUpdateOne {
	if u != nil {
		gsuo.SetValue(*u)
	}
	return gsuo
}

// AddValue adds u to the "Value" field.
func (gsuo *GlobalStateUpdateOne) AddValue(u int64) *GlobalStateUpdateOne {
	gsuo.mutation.AddValue(u)
	return gsuo
}

// Mutation returns the GlobalStateMutation object of the builder.
func (gsuo *GlobalStateUpdateOne) Mutation() *GlobalStateMutation {
	return gsuo.mutation
}

// Where appends a list predicates to the GlobalStateUpdate builder.
func (gsuo *GlobalStateUpdateOne) Where(ps ...predicate.GlobalState) *GlobalStateUpdateOne {
	gsuo.mutation.Where(ps...)
	return gsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GlobalStateUpdateOne) Select(field string, fields ...string) *GlobalStateUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GlobalState entity.
func (gsuo *GlobalStateUpdateOne) Save(ctx context.Context) (*GlobalState, error) {
	return withHooks(ctx, gsuo.sqlSave, gsuo.mutation, gsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GlobalStateUpdateOne) SaveX(ctx context.Context) *GlobalState {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GlobalStateUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GlobalStateUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gsuo *GlobalStateUpdateOne) sqlSave(ctx context.Context) (_node *GlobalState, err error) {
	_spec := sqlgraph.NewUpdateSpec(globalstate.Table, globalstate.Columns, sqlgraph.NewFieldSpec(globalstate.FieldID, field.TypeInt))
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GlobalState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, globalstate.FieldID)
		for _, f := range fields {
			if !globalstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != globalstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.Key(); ok {
		_spec.SetField(globalstate.FieldKey, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.Value(); ok {
		_spec.SetField(globalstate.FieldValue, field.TypeUint64, value)
	}
	if value, ok := gsuo.mutation.AddedValue(); ok {
		_spec.AddField(globalstate.FieldValue, field.TypeUint64, value)
	}
	_node = &GlobalState{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globalstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gsuo.mutation.done = true
	return _node, nil
}
