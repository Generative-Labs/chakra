// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/generativelabs/btcserver/internal/db/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/generativelabs/btcserver/internal/db/ent/globalstate"
	"github.com/generativelabs/btcserver/internal/db/ent/stake"
	"github.com/generativelabs/btcserver/internal/db/ent/stakeindex"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GlobalState is the client for interacting with the GlobalState builders.
	GlobalState *GlobalStateClient
	// Stake is the client for interacting with the Stake builders.
	Stake *StakeClient
	// StakeIndex is the client for interacting with the StakeIndex builders.
	StakeIndex *StakeIndexClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GlobalState = NewGlobalStateClient(c.config)
	c.Stake = NewStakeClient(c.config)
	c.StakeIndex = NewStakeIndexClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		GlobalState: NewGlobalStateClient(cfg),
		Stake:       NewStakeClient(cfg),
		StakeIndex:  NewStakeIndexClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		GlobalState: NewGlobalStateClient(cfg),
		Stake:       NewStakeClient(cfg),
		StakeIndex:  NewStakeIndexClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GlobalState.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GlobalState.Use(hooks...)
	c.Stake.Use(hooks...)
	c.StakeIndex.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.GlobalState.Intercept(interceptors...)
	c.Stake.Intercept(interceptors...)
	c.StakeIndex.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GlobalStateMutation:
		return c.GlobalState.mutate(ctx, m)
	case *StakeMutation:
		return c.Stake.mutate(ctx, m)
	case *StakeIndexMutation:
		return c.StakeIndex.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GlobalStateClient is a client for the GlobalState schema.
type GlobalStateClient struct {
	config
}

// NewGlobalStateClient returns a client for the GlobalState from the given config.
func NewGlobalStateClient(c config) *GlobalStateClient {
	return &GlobalStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `globalstate.Hooks(f(g(h())))`.
func (c *GlobalStateClient) Use(hooks ...Hook) {
	c.hooks.GlobalState = append(c.hooks.GlobalState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `globalstate.Intercept(f(g(h())))`.
func (c *GlobalStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.GlobalState = append(c.inters.GlobalState, interceptors...)
}

// Create returns a builder for creating a GlobalState entity.
func (c *GlobalStateClient) Create() *GlobalStateCreate {
	mutation := newGlobalStateMutation(c.config, OpCreate)
	return &GlobalStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GlobalState entities.
func (c *GlobalStateClient) CreateBulk(builders ...*GlobalStateCreate) *GlobalStateCreateBulk {
	return &GlobalStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GlobalStateClient) MapCreateBulk(slice any, setFunc func(*GlobalStateCreate, int)) *GlobalStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GlobalStateCreateBulk{err: fmt.Errorf("calling to GlobalStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GlobalStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GlobalStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GlobalState.
func (c *GlobalStateClient) Update() *GlobalStateUpdate {
	mutation := newGlobalStateMutation(c.config, OpUpdate)
	return &GlobalStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GlobalStateClient) UpdateOne(gs *GlobalState) *GlobalStateUpdateOne {
	mutation := newGlobalStateMutation(c.config, OpUpdateOne, withGlobalState(gs))
	return &GlobalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GlobalStateClient) UpdateOneID(id int) *GlobalStateUpdateOne {
	mutation := newGlobalStateMutation(c.config, OpUpdateOne, withGlobalStateID(id))
	return &GlobalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GlobalState.
func (c *GlobalStateClient) Delete() *GlobalStateDelete {
	mutation := newGlobalStateMutation(c.config, OpDelete)
	return &GlobalStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GlobalStateClient) DeleteOne(gs *GlobalState) *GlobalStateDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GlobalStateClient) DeleteOneID(id int) *GlobalStateDeleteOne {
	builder := c.Delete().Where(globalstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GlobalStateDeleteOne{builder}
}

// Query returns a query builder for GlobalState.
func (c *GlobalStateClient) Query() *GlobalStateQuery {
	return &GlobalStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGlobalState},
		inters: c.Interceptors(),
	}
}

// Get returns a GlobalState entity by its id.
func (c *GlobalStateClient) Get(ctx context.Context, id int) (*GlobalState, error) {
	return c.Query().Where(globalstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GlobalStateClient) GetX(ctx context.Context, id int) *GlobalState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GlobalStateClient) Hooks() []Hook {
	return c.hooks.GlobalState
}

// Interceptors returns the client interceptors.
func (c *GlobalStateClient) Interceptors() []Interceptor {
	return c.inters.GlobalState
}

func (c *GlobalStateClient) mutate(ctx context.Context, m *GlobalStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GlobalStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GlobalStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GlobalStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GlobalStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GlobalState mutation op: %q", m.Op())
	}
}

// StakeClient is a client for the Stake schema.
type StakeClient struct {
	config
}

// NewStakeClient returns a client for the Stake from the given config.
func NewStakeClient(c config) *StakeClient {
	return &StakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stake.Hooks(f(g(h())))`.
func (c *StakeClient) Use(hooks ...Hook) {
	c.hooks.Stake = append(c.hooks.Stake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stake.Intercept(f(g(h())))`.
func (c *StakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Stake = append(c.inters.Stake, interceptors...)
}

// Create returns a builder for creating a Stake entity.
func (c *StakeClient) Create() *StakeCreate {
	mutation := newStakeMutation(c.config, OpCreate)
	return &StakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stake entities.
func (c *StakeClient) CreateBulk(builders ...*StakeCreate) *StakeCreateBulk {
	return &StakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StakeClient) MapCreateBulk(slice any, setFunc func(*StakeCreate, int)) *StakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StakeCreateBulk{err: fmt.Errorf("calling to StakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stake.
func (c *StakeClient) Update() *StakeUpdate {
	mutation := newStakeMutation(c.config, OpUpdate)
	return &StakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StakeClient) UpdateOne(s *Stake) *StakeUpdateOne {
	mutation := newStakeMutation(c.config, OpUpdateOne, withStake(s))
	return &StakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StakeClient) UpdateOneID(id int) *StakeUpdateOne {
	mutation := newStakeMutation(c.config, OpUpdateOne, withStakeID(id))
	return &StakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stake.
func (c *StakeClient) Delete() *StakeDelete {
	mutation := newStakeMutation(c.config, OpDelete)
	return &StakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StakeClient) DeleteOne(s *Stake) *StakeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StakeClient) DeleteOneID(id int) *StakeDeleteOne {
	builder := c.Delete().Where(stake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StakeDeleteOne{builder}
}

// Query returns a query builder for Stake.
func (c *StakeClient) Query() *StakeQuery {
	return &StakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStake},
		inters: c.Interceptors(),
	}
}

// Get returns a Stake entity by its id.
func (c *StakeClient) Get(ctx context.Context, id int) (*Stake, error) {
	return c.Query().Where(stake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StakeClient) GetX(ctx context.Context, id int) *Stake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StakeClient) Hooks() []Hook {
	return c.hooks.Stake
}

// Interceptors returns the client interceptors.
func (c *StakeClient) Interceptors() []Interceptor {
	return c.inters.Stake
}

func (c *StakeClient) mutate(ctx context.Context, m *StakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Stake mutation op: %q", m.Op())
	}
}

// StakeIndexClient is a client for the StakeIndex schema.
type StakeIndexClient struct {
	config
}

// NewStakeIndexClient returns a client for the StakeIndex from the given config.
func NewStakeIndexClient(c config) *StakeIndexClient {
	return &StakeIndexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stakeindex.Hooks(f(g(h())))`.
func (c *StakeIndexClient) Use(hooks ...Hook) {
	c.hooks.StakeIndex = append(c.hooks.StakeIndex, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stakeindex.Intercept(f(g(h())))`.
func (c *StakeIndexClient) Intercept(interceptors ...Interceptor) {
	c.inters.StakeIndex = append(c.inters.StakeIndex, interceptors...)
}

// Create returns a builder for creating a StakeIndex entity.
func (c *StakeIndexClient) Create() *StakeIndexCreate {
	mutation := newStakeIndexMutation(c.config, OpCreate)
	return &StakeIndexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StakeIndex entities.
func (c *StakeIndexClient) CreateBulk(builders ...*StakeIndexCreate) *StakeIndexCreateBulk {
	return &StakeIndexCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StakeIndexClient) MapCreateBulk(slice any, setFunc func(*StakeIndexCreate, int)) *StakeIndexCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StakeIndexCreateBulk{err: fmt.Errorf("calling to StakeIndexClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StakeIndexCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StakeIndexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StakeIndex.
func (c *StakeIndexClient) Update() *StakeIndexUpdate {
	mutation := newStakeIndexMutation(c.config, OpUpdate)
	return &StakeIndexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StakeIndexClient) UpdateOne(si *StakeIndex) *StakeIndexUpdateOne {
	mutation := newStakeIndexMutation(c.config, OpUpdateOne, withStakeIndex(si))
	return &StakeIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StakeIndexClient) UpdateOneID(id int) *StakeIndexUpdateOne {
	mutation := newStakeIndexMutation(c.config, OpUpdateOne, withStakeIndexID(id))
	return &StakeIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StakeIndex.
func (c *StakeIndexClient) Delete() *StakeIndexDelete {
	mutation := newStakeIndexMutation(c.config, OpDelete)
	return &StakeIndexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StakeIndexClient) DeleteOne(si *StakeIndex) *StakeIndexDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StakeIndexClient) DeleteOneID(id int) *StakeIndexDeleteOne {
	builder := c.Delete().Where(stakeindex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StakeIndexDeleteOne{builder}
}

// Query returns a query builder for StakeIndex.
func (c *StakeIndexClient) Query() *StakeIndexQuery {
	return &StakeIndexQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStakeIndex},
		inters: c.Interceptors(),
	}
}

// Get returns a StakeIndex entity by its id.
func (c *StakeIndexClient) Get(ctx context.Context, id int) (*StakeIndex, error) {
	return c.Query().Where(stakeindex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StakeIndexClient) GetX(ctx context.Context, id int) *StakeIndex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StakeIndexClient) Hooks() []Hook {
	return c.hooks.StakeIndex
}

// Interceptors returns the client interceptors.
func (c *StakeIndexClient) Interceptors() []Interceptor {
	return c.inters.StakeIndex
}

func (c *StakeIndexClient) mutate(ctx context.Context, m *StakeIndexMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StakeIndexCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StakeIndexUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StakeIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StakeIndexDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StakeIndex mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		GlobalState, Stake, StakeIndex []ent.Hook
	}
	inters struct {
		GlobalState, Stake, StakeIndex []ent.Interceptor
	}
)
