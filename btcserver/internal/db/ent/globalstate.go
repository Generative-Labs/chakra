// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/generativelabs/btcserver/internal/db/ent/globalstate"
)

// GlobalState is the model entity for the GlobalState schema.
type GlobalState struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "Key" field.
	Key string `json:"Key,omitempty"`
	// Value holds the value of the "Value" field.
	Value uint64 `json:"Value,omitempty"`
	// CreateAt holds the value of the "CreateAt" field.
	CreateAt uint64 `json:"CreateAt,omitempty"`
	// UpdateAt holds the value of the "UpdateAt" field.
	UpdateAt     uint64 `json:"UpdateAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GlobalState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case globalstate.FieldID, globalstate.FieldValue, globalstate.FieldCreateAt, globalstate.FieldUpdateAt:
			values[i] = new(sql.NullInt64)
		case globalstate.FieldKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GlobalState fields.
func (gs *GlobalState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case globalstate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case globalstate.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Key", values[i])
			} else if value.Valid {
				gs.Key = value.String
			}
		case globalstate.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Value", values[i])
			} else if value.Valid {
				gs.Value = uint64(value.Int64)
			}
		case globalstate.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreateAt", values[i])
			} else if value.Valid {
				gs.CreateAt = uint64(value.Int64)
			}
		case globalstate.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateAt", values[i])
			} else if value.Valid {
				gs.UpdateAt = uint64(value.Int64)
			}
		default:
			gs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the GlobalState.
// This includes values selected through modifiers, order, etc.
func (gs *GlobalState) GetValue(name string) (ent.Value, error) {
	return gs.selectValues.Get(name)
}

// Update returns a builder for updating this GlobalState.
// Note that you need to call GlobalState.Unwrap() before calling this method if this GlobalState
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GlobalState) Update() *GlobalStateUpdateOne {
	return NewGlobalStateClient(gs.config).UpdateOne(gs)
}

// Unwrap unwraps the GlobalState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GlobalState) Unwrap() *GlobalState {
	_tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GlobalState is not a transactional entity")
	}
	gs.config.driver = _tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GlobalState) String() string {
	var builder strings.Builder
	builder.WriteString("GlobalState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gs.ID))
	builder.WriteString("Key=")
	builder.WriteString(gs.Key)
	builder.WriteString(", ")
	builder.WriteString("Value=")
	builder.WriteString(fmt.Sprintf("%v", gs.Value))
	builder.WriteString(", ")
	builder.WriteString("CreateAt=")
	builder.WriteString(fmt.Sprintf("%v", gs.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("UpdateAt=")
	builder.WriteString(fmt.Sprintf("%v", gs.UpdateAt))
	builder.WriteByte(')')
	return builder.String()
}

// GlobalStates is a parsable slice of GlobalState.
type GlobalStates []*GlobalState
