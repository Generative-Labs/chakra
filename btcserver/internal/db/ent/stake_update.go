// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/generativelabs/btcserver/internal/db/ent/predicate"
	"github.com/generativelabs/btcserver/internal/db/ent/stake"
)

// StakeUpdate is the builder for updating Stake entities.
type StakeUpdate struct {
	config
	hooks    []Hook
	mutation *StakeMutation
}

// Where appends a list predicates to the StakeUpdate builder.
func (su *StakeUpdate) Where(ps ...predicate.Stake) *StakeUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStaker sets the "Staker" field.
func (su *StakeUpdate) SetStaker(s string) *StakeUpdate {
	su.mutation.SetStaker(s)
	return su
}

// SetNillableStaker sets the "Staker" field if the given value is not nil.
func (su *StakeUpdate) SetNillableStaker(s *string) *StakeUpdate {
	if s != nil {
		su.SetStaker(*s)
	}
	return su
}

// SetStakerPublicKey sets the "StakerPublicKey" field.
func (su *StakeUpdate) SetStakerPublicKey(s string) *StakeUpdate {
	su.mutation.SetStakerPublicKey(s)
	return su
}

// SetNillableStakerPublicKey sets the "StakerPublicKey" field if the given value is not nil.
func (su *StakeUpdate) SetNillableStakerPublicKey(s *string) *StakeUpdate {
	if s != nil {
		su.SetStakerPublicKey(*s)
	}
	return su
}

// SetTx sets the "Tx" field.
func (su *StakeUpdate) SetTx(s string) *StakeUpdate {
	su.mutation.SetTx(s)
	return su
}

// SetNillableTx sets the "Tx" field if the given value is not nil.
func (su *StakeUpdate) SetNillableTx(s *string) *StakeUpdate {
	if s != nil {
		su.SetTx(*s)
	}
	return su
}

// SetStart sets the "Start" field.
func (su *StakeUpdate) SetStart(u uint64) *StakeUpdate {
	su.mutation.ResetStart()
	su.mutation.SetStart(u)
	return su
}

// SetNillableStart sets the "Start" field if the given value is not nil.
func (su *StakeUpdate) SetNillableStart(u *uint64) *StakeUpdate {
	if u != nil {
		su.SetStart(*u)
	}
	return su
}

// AddStart adds u to the "Start" field.
func (su *StakeUpdate) AddStart(u int64) *StakeUpdate {
	su.mutation.AddStart(u)
	return su
}

// SetDuration sets the "Duration" field.
func (su *StakeUpdate) SetDuration(u uint64) *StakeUpdate {
	su.mutation.ResetDuration()
	su.mutation.SetDuration(u)
	return su
}

// SetNillableDuration sets the "Duration" field if the given value is not nil.
func (su *StakeUpdate) SetNillableDuration(u *uint64) *StakeUpdate {
	if u != nil {
		su.SetDuration(*u)
	}
	return su
}

// AddDuration adds u to the "Duration" field.
func (su *StakeUpdate) AddDuration(u int64) *StakeUpdate {
	su.mutation.AddDuration(u)
	return su
}

// SetDeadline sets the "Deadline" field.
func (su *StakeUpdate) SetDeadline(u uint64) *StakeUpdate {
	su.mutation.ResetDeadline()
	su.mutation.SetDeadline(u)
	return su
}

// SetNillableDeadline sets the "Deadline" field if the given value is not nil.
func (su *StakeUpdate) SetNillableDeadline(u *uint64) *StakeUpdate {
	if u != nil {
		su.SetDeadline(*u)
	}
	return su
}

// AddDeadline adds u to the "Deadline" field.
func (su *StakeUpdate) AddDeadline(u int64) *StakeUpdate {
	su.mutation.AddDeadline(u)
	return su
}

// SetReleasingTime sets the "ReleasingTime" field.
func (su *StakeUpdate) SetReleasingTime(u uint64) *StakeUpdate {
	su.mutation.ResetReleasingTime()
	su.mutation.SetReleasingTime(u)
	return su
}

// SetNillableReleasingTime sets the "ReleasingTime" field if the given value is not nil.
func (su *StakeUpdate) SetNillableReleasingTime(u *uint64) *StakeUpdate {
	if u != nil {
		su.SetReleasingTime(*u)
	}
	return su
}

// AddReleasingTime adds u to the "ReleasingTime" field.
func (su *StakeUpdate) AddReleasingTime(u int64) *StakeUpdate {
	su.mutation.AddReleasingTime(u)
	return su
}

// SetAmount sets the "Amount" field.
func (su *StakeUpdate) SetAmount(u uint64) *StakeUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(u)
	return su
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (su *StakeUpdate) SetNillableAmount(u *uint64) *StakeUpdate {
	if u != nil {
		su.SetAmount(*u)
	}
	return su
}

// AddAmount adds u to the "Amount" field.
func (su *StakeUpdate) AddAmount(u int64) *StakeUpdate {
	su.mutation.AddAmount(u)
	return su
}

// SetRewardReceiver sets the "RewardReceiver" field.
func (su *StakeUpdate) SetRewardReceiver(s string) *StakeUpdate {
	su.mutation.SetRewardReceiver(s)
	return su
}

// SetNillableRewardReceiver sets the "RewardReceiver" field if the given value is not nil.
func (su *StakeUpdate) SetNillableRewardReceiver(s *string) *StakeUpdate {
	if s != nil {
		su.SetRewardReceiver(*s)
	}
	return su
}

// SetFinalizedStatus sets the "FinalizedStatus" field.
func (su *StakeUpdate) SetFinalizedStatus(i int) *StakeUpdate {
	su.mutation.ResetFinalizedStatus()
	su.mutation.SetFinalizedStatus(i)
	return su
}

// SetNillableFinalizedStatus sets the "FinalizedStatus" field if the given value is not nil.
func (su *StakeUpdate) SetNillableFinalizedStatus(i *int) *StakeUpdate {
	if i != nil {
		su.SetFinalizedStatus(*i)
	}
	return su
}

// AddFinalizedStatus adds i to the "FinalizedStatus" field.
func (su *StakeUpdate) AddFinalizedStatus(i int) *StakeUpdate {
	su.mutation.AddFinalizedStatus(i)
	return su
}

// SetReleaseStatus sets the "ReleaseStatus" field.
func (su *StakeUpdate) SetReleaseStatus(i int) *StakeUpdate {
	su.mutation.ResetReleaseStatus()
	su.mutation.SetReleaseStatus(i)
	return su
}

// SetNillableReleaseStatus sets the "ReleaseStatus" field if the given value is not nil.
func (su *StakeUpdate) SetNillableReleaseStatus(i *int) *StakeUpdate {
	if i != nil {
		su.SetReleaseStatus(*i)
	}
	return su
}

// AddReleaseStatus adds i to the "ReleaseStatus" field.
func (su *StakeUpdate) AddReleaseStatus(i int) *StakeUpdate {
	su.mutation.AddReleaseStatus(i)
	return su
}

// SetBtcSig sets the "BtcSig" field.
func (su *StakeUpdate) SetBtcSig(s string) *StakeUpdate {
	su.mutation.SetBtcSig(s)
	return su
}

// SetNillableBtcSig sets the "BtcSig" field if the given value is not nil.
func (su *StakeUpdate) SetNillableBtcSig(s *string) *StakeUpdate {
	if s != nil {
		su.SetBtcSig(*s)
	}
	return su
}

// SetReceiverSig sets the "ReceiverSig" field.
func (su *StakeUpdate) SetReceiverSig(s string) *StakeUpdate {
	su.mutation.SetReceiverSig(s)
	return su
}

// SetNillableReceiverSig sets the "ReceiverSig" field if the given value is not nil.
func (su *StakeUpdate) SetNillableReceiverSig(s *string) *StakeUpdate {
	if s != nil {
		su.SetReceiverSig(*s)
	}
	return su
}

// SetTimestamp sets the "Timestamp" field.
func (su *StakeUpdate) SetTimestamp(u uint64) *StakeUpdate {
	su.mutation.ResetTimestamp()
	su.mutation.SetTimestamp(u)
	return su
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (su *StakeUpdate) SetNillableTimestamp(u *uint64) *StakeUpdate {
	if u != nil {
		su.SetTimestamp(*u)
	}
	return su
}

// AddTimestamp adds u to the "Timestamp" field.
func (su *StakeUpdate) AddTimestamp(u int64) *StakeUpdate {
	su.mutation.AddTimestamp(u)
	return su
}

// Mutation returns the StakeMutation object of the builder.
func (su *StakeUpdate) Mutation() *StakeMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StakeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StakeUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StakeUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StakeUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StakeUpdate) check() error {
	if v, ok := su.mutation.Staker(); ok {
		if err := stake.StakerValidator(v); err != nil {
			return &ValidationError{Name: "Staker", err: fmt.Errorf(`ent: validator failed for field "Stake.Staker": %w`, err)}
		}
	}
	if v, ok := su.mutation.GetTx(); ok {
		if err := stake.TxValidator(v); err != nil {
			return &ValidationError{Name: "Tx", err: fmt.Errorf(`ent: validator failed for field "Stake.Tx": %w`, err)}
		}
	}
	if v, ok := su.mutation.RewardReceiver(); ok {
		if err := stake.RewardReceiverValidator(v); err != nil {
			return &ValidationError{Name: "RewardReceiver", err: fmt.Errorf(`ent: validator failed for field "Stake.RewardReceiver": %w`, err)}
		}
	}
	return nil
}

func (su *StakeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stake.Table, stake.Columns, sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Staker(); ok {
		_spec.SetField(stake.FieldStaker, field.TypeString, value)
	}
	if value, ok := su.mutation.StakerPublicKey(); ok {
		_spec.SetField(stake.FieldStakerPublicKey, field.TypeString, value)
	}
	if value, ok := su.mutation.GetTx(); ok {
		_spec.SetField(stake.FieldTx, field.TypeString, value)
	}
	if value, ok := su.mutation.Start(); ok {
		_spec.SetField(stake.FieldStart, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedStart(); ok {
		_spec.AddField(stake.FieldStart, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Duration(); ok {
		_spec.SetField(stake.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedDuration(); ok {
		_spec.AddField(stake.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Deadline(); ok {
		_spec.SetField(stake.FieldDeadline, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedDeadline(); ok {
		_spec.AddField(stake.FieldDeadline, field.TypeUint64, value)
	}
	if value, ok := su.mutation.ReleasingTime(); ok {
		_spec.SetField(stake.FieldReleasingTime, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedReleasingTime(); ok {
		_spec.AddField(stake.FieldReleasingTime, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(stake.FieldAmount, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(stake.FieldAmount, field.TypeUint64, value)
	}
	if value, ok := su.mutation.RewardReceiver(); ok {
		_spec.SetField(stake.FieldRewardReceiver, field.TypeString, value)
	}
	if value, ok := su.mutation.FinalizedStatus(); ok {
		_spec.SetField(stake.FieldFinalizedStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedFinalizedStatus(); ok {
		_spec.AddField(stake.FieldFinalizedStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.ReleaseStatus(); ok {
		_spec.SetField(stake.FieldReleaseStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedReleaseStatus(); ok {
		_spec.AddField(stake.FieldReleaseStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.BtcSig(); ok {
		_spec.SetField(stake.FieldBtcSig, field.TypeString, value)
	}
	if value, ok := su.mutation.ReceiverSig(); ok {
		_spec.SetField(stake.FieldReceiverSig, field.TypeString, value)
	}
	if value, ok := su.mutation.Timestamp(); ok {
		_spec.SetField(stake.FieldTimestamp, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedTimestamp(); ok {
		_spec.AddField(stake.FieldTimestamp, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stake.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StakeUpdateOne is the builder for updating a single Stake entity.
type StakeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StakeMutation
}

// SetStaker sets the "Staker" field.
func (suo *StakeUpdateOne) SetStaker(s string) *StakeUpdateOne {
	suo.mutation.SetStaker(s)
	return suo
}

// SetNillableStaker sets the "Staker" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableStaker(s *string) *StakeUpdateOne {
	if s != nil {
		suo.SetStaker(*s)
	}
	return suo
}

// SetStakerPublicKey sets the "StakerPublicKey" field.
func (suo *StakeUpdateOne) SetStakerPublicKey(s string) *StakeUpdateOne {
	suo.mutation.SetStakerPublicKey(s)
	return suo
}

// SetNillableStakerPublicKey sets the "StakerPublicKey" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableStakerPublicKey(s *string) *StakeUpdateOne {
	if s != nil {
		suo.SetStakerPublicKey(*s)
	}
	return suo
}

// SetTx sets the "Tx" field.
func (suo *StakeUpdateOne) SetTx(s string) *StakeUpdateOne {
	suo.mutation.SetTx(s)
	return suo
}

// SetNillableTx sets the "Tx" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableTx(s *string) *StakeUpdateOne {
	if s != nil {
		suo.SetTx(*s)
	}
	return suo
}

// SetStart sets the "Start" field.
func (suo *StakeUpdateOne) SetStart(u uint64) *StakeUpdateOne {
	suo.mutation.ResetStart()
	suo.mutation.SetStart(u)
	return suo
}

// SetNillableStart sets the "Start" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableStart(u *uint64) *StakeUpdateOne {
	if u != nil {
		suo.SetStart(*u)
	}
	return suo
}

// AddStart adds u to the "Start" field.
func (suo *StakeUpdateOne) AddStart(u int64) *StakeUpdateOne {
	suo.mutation.AddStart(u)
	return suo
}

// SetDuration sets the "Duration" field.
func (suo *StakeUpdateOne) SetDuration(u uint64) *StakeUpdateOne {
	suo.mutation.ResetDuration()
	suo.mutation.SetDuration(u)
	return suo
}

// SetNillableDuration sets the "Duration" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableDuration(u *uint64) *StakeUpdateOne {
	if u != nil {
		suo.SetDuration(*u)
	}
	return suo
}

// AddDuration adds u to the "Duration" field.
func (suo *StakeUpdateOne) AddDuration(u int64) *StakeUpdateOne {
	suo.mutation.AddDuration(u)
	return suo
}

// SetDeadline sets the "Deadline" field.
func (suo *StakeUpdateOne) SetDeadline(u uint64) *StakeUpdateOne {
	suo.mutation.ResetDeadline()
	suo.mutation.SetDeadline(u)
	return suo
}

// SetNillableDeadline sets the "Deadline" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableDeadline(u *uint64) *StakeUpdateOne {
	if u != nil {
		suo.SetDeadline(*u)
	}
	return suo
}

// AddDeadline adds u to the "Deadline" field.
func (suo *StakeUpdateOne) AddDeadline(u int64) *StakeUpdateOne {
	suo.mutation.AddDeadline(u)
	return suo
}

// SetReleasingTime sets the "ReleasingTime" field.
func (suo *StakeUpdateOne) SetReleasingTime(u uint64) *StakeUpdateOne {
	suo.mutation.ResetReleasingTime()
	suo.mutation.SetReleasingTime(u)
	return suo
}

// SetNillableReleasingTime sets the "ReleasingTime" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableReleasingTime(u *uint64) *StakeUpdateOne {
	if u != nil {
		suo.SetReleasingTime(*u)
	}
	return suo
}

// AddReleasingTime adds u to the "ReleasingTime" field.
func (suo *StakeUpdateOne) AddReleasingTime(u int64) *StakeUpdateOne {
	suo.mutation.AddReleasingTime(u)
	return suo
}

// SetAmount sets the "Amount" field.
func (suo *StakeUpdateOne) SetAmount(u uint64) *StakeUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(u)
	return suo
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableAmount(u *uint64) *StakeUpdateOne {
	if u != nil {
		suo.SetAmount(*u)
	}
	return suo
}

// AddAmount adds u to the "Amount" field.
func (suo *StakeUpdateOne) AddAmount(u int64) *StakeUpdateOne {
	suo.mutation.AddAmount(u)
	return suo
}

// SetRewardReceiver sets the "RewardReceiver" field.
func (suo *StakeUpdateOne) SetRewardReceiver(s string) *StakeUpdateOne {
	suo.mutation.SetRewardReceiver(s)
	return suo
}

// SetNillableRewardReceiver sets the "RewardReceiver" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableRewardReceiver(s *string) *StakeUpdateOne {
	if s != nil {
		suo.SetRewardReceiver(*s)
	}
	return suo
}

// SetFinalizedStatus sets the "FinalizedStatus" field.
func (suo *StakeUpdateOne) SetFinalizedStatus(i int) *StakeUpdateOne {
	suo.mutation.ResetFinalizedStatus()
	suo.mutation.SetFinalizedStatus(i)
	return suo
}

// SetNillableFinalizedStatus sets the "FinalizedStatus" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableFinalizedStatus(i *int) *StakeUpdateOne {
	if i != nil {
		suo.SetFinalizedStatus(*i)
	}
	return suo
}

// AddFinalizedStatus adds i to the "FinalizedStatus" field.
func (suo *StakeUpdateOne) AddFinalizedStatus(i int) *StakeUpdateOne {
	suo.mutation.AddFinalizedStatus(i)
	return suo
}

// SetReleaseStatus sets the "ReleaseStatus" field.
func (suo *StakeUpdateOne) SetReleaseStatus(i int) *StakeUpdateOne {
	suo.mutation.ResetReleaseStatus()
	suo.mutation.SetReleaseStatus(i)
	return suo
}

// SetNillableReleaseStatus sets the "ReleaseStatus" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableReleaseStatus(i *int) *StakeUpdateOne {
	if i != nil {
		suo.SetReleaseStatus(*i)
	}
	return suo
}

// AddReleaseStatus adds i to the "ReleaseStatus" field.
func (suo *StakeUpdateOne) AddReleaseStatus(i int) *StakeUpdateOne {
	suo.mutation.AddReleaseStatus(i)
	return suo
}

// SetBtcSig sets the "BtcSig" field.
func (suo *StakeUpdateOne) SetBtcSig(s string) *StakeUpdateOne {
	suo.mutation.SetBtcSig(s)
	return suo
}

// SetNillableBtcSig sets the "BtcSig" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableBtcSig(s *string) *StakeUpdateOne {
	if s != nil {
		suo.SetBtcSig(*s)
	}
	return suo
}

// SetReceiverSig sets the "ReceiverSig" field.
func (suo *StakeUpdateOne) SetReceiverSig(s string) *StakeUpdateOne {
	suo.mutation.SetReceiverSig(s)
	return suo
}

// SetNillableReceiverSig sets the "ReceiverSig" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableReceiverSig(s *string) *StakeUpdateOne {
	if s != nil {
		suo.SetReceiverSig(*s)
	}
	return suo
}

// SetTimestamp sets the "Timestamp" field.
func (suo *StakeUpdateOne) SetTimestamp(u uint64) *StakeUpdateOne {
	suo.mutation.ResetTimestamp()
	suo.mutation.SetTimestamp(u)
	return suo
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableTimestamp(u *uint64) *StakeUpdateOne {
	if u != nil {
		suo.SetTimestamp(*u)
	}
	return suo
}

// AddTimestamp adds u to the "Timestamp" field.
func (suo *StakeUpdateOne) AddTimestamp(u int64) *StakeUpdateOne {
	suo.mutation.AddTimestamp(u)
	return suo
}

// Mutation returns the StakeMutation object of the builder.
func (suo *StakeUpdateOne) Mutation() *StakeMutation {
	return suo.mutation
}

// Where appends a list predicates to the StakeUpdate builder.
func (suo *StakeUpdateOne) Where(ps ...predicate.Stake) *StakeUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StakeUpdateOne) Select(field string, fields ...string) *StakeUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stake entity.
func (suo *StakeUpdateOne) Save(ctx context.Context) (*Stake, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StakeUpdateOne) SaveX(ctx context.Context) *Stake {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StakeUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StakeUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StakeUpdateOne) check() error {
	if v, ok := suo.mutation.Staker(); ok {
		if err := stake.StakerValidator(v); err != nil {
			return &ValidationError{Name: "Staker", err: fmt.Errorf(`ent: validator failed for field "Stake.Staker": %w`, err)}
		}
	}
	if v, ok := suo.mutation.GetTx(); ok {
		if err := stake.TxValidator(v); err != nil {
			return &ValidationError{Name: "Tx", err: fmt.Errorf(`ent: validator failed for field "Stake.Tx": %w`, err)}
		}
	}
	if v, ok := suo.mutation.RewardReceiver(); ok {
		if err := stake.RewardReceiverValidator(v); err != nil {
			return &ValidationError{Name: "RewardReceiver", err: fmt.Errorf(`ent: validator failed for field "Stake.RewardReceiver": %w`, err)}
		}
	}
	return nil
}

func (suo *StakeUpdateOne) sqlSave(ctx context.Context) (_node *Stake, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stake.Table, stake.Columns, sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stake.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stake.FieldID)
		for _, f := range fields {
			if !stake.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stake.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Staker(); ok {
		_spec.SetField(stake.FieldStaker, field.TypeString, value)
	}
	if value, ok := suo.mutation.StakerPublicKey(); ok {
		_spec.SetField(stake.FieldStakerPublicKey, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetTx(); ok {
		_spec.SetField(stake.FieldTx, field.TypeString, value)
	}
	if value, ok := suo.mutation.Start(); ok {
		_spec.SetField(stake.FieldStart, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedStart(); ok {
		_spec.AddField(stake.FieldStart, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Duration(); ok {
		_spec.SetField(stake.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedDuration(); ok {
		_spec.AddField(stake.FieldDuration, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Deadline(); ok {
		_spec.SetField(stake.FieldDeadline, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedDeadline(); ok {
		_spec.AddField(stake.FieldDeadline, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.ReleasingTime(); ok {
		_spec.SetField(stake.FieldReleasingTime, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedReleasingTime(); ok {
		_spec.AddField(stake.FieldReleasingTime, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(stake.FieldAmount, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(stake.FieldAmount, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.RewardReceiver(); ok {
		_spec.SetField(stake.FieldRewardReceiver, field.TypeString, value)
	}
	if value, ok := suo.mutation.FinalizedStatus(); ok {
		_spec.SetField(stake.FieldFinalizedStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedFinalizedStatus(); ok {
		_spec.AddField(stake.FieldFinalizedStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ReleaseStatus(); ok {
		_spec.SetField(stake.FieldReleaseStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedReleaseStatus(); ok {
		_spec.AddField(stake.FieldReleaseStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.BtcSig(); ok {
		_spec.SetField(stake.FieldBtcSig, field.TypeString, value)
	}
	if value, ok := suo.mutation.ReceiverSig(); ok {
		_spec.SetField(stake.FieldReceiverSig, field.TypeString, value)
	}
	if value, ok := suo.mutation.Timestamp(); ok {
		_spec.SetField(stake.FieldTimestamp, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedTimestamp(); ok {
		_spec.AddField(stake.FieldTimestamp, field.TypeUint64, value)
	}
	_node = &Stake{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stake.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
