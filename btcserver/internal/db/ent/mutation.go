// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/generativelabs/btcserver/internal/db/ent/predicate"
	"github.com/generativelabs/btcserver/internal/db/ent/stake"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStake = "Stake"
)

// StakeMutation represents an operation that mutates the Stake nodes in the graph.
type StakeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	staker          *string
	tx              *string
	start           *int64
	addstart        *int64
	duration        *int64
	addduration     *int64
	amount          *int64
	addamount       *int64
	reward_receiver *string
	end             *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Stake, error)
	predicates      []predicate.Stake
}

var _ ent.Mutation = (*StakeMutation)(nil)

// stakeOption allows management of the mutation configuration using functional options.
type stakeOption func(*StakeMutation)

// newStakeMutation creates new mutation for the Stake entity.
func newStakeMutation(c config, op Op, opts ...stakeOption) *StakeMutation {
	m := &StakeMutation{
		config:        c,
		op:            op,
		typ:           TypeStake,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStakeID sets the ID field of the mutation.
func withStakeID(id int) stakeOption {
	return func(m *StakeMutation) {
		var (
			err   error
			once  sync.Once
			value *Stake
		)
		m.oldValue = func(ctx context.Context) (*Stake, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stake.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStake sets the old Stake of the mutation.
func withStake(node *Stake) stakeOption {
	return func(m *StakeMutation) {
		m.oldValue = func(context.Context) (*Stake, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StakeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StakeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StakeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StakeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stake.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStaker sets the "staker" field.
func (m *StakeMutation) SetStaker(s string) {
	m.staker = &s
}

// Staker returns the value of the "staker" field in the mutation.
func (m *StakeMutation) Staker() (r string, exists bool) {
	v := m.staker
	if v == nil {
		return
	}
	return *v, true
}

// OldStaker returns the old "staker" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldStaker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStaker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStaker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStaker: %w", err)
	}
	return oldValue.Staker, nil
}

// ResetStaker resets all changes to the "staker" field.
func (m *StakeMutation) ResetStaker() {
	m.staker = nil
}

// SetTx sets the "tx" field.
func (m *StakeMutation) SetTx(s string) {
	m.tx = &s
}

// GetTx returns the value of the "tx" field in the mutation.
func (m *StakeMutation) GetTx() (r string, exists bool) {
	v := m.tx
	if v == nil {
		return
	}
	return *v, true
}

// OldTx returns the old "tx" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldTx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTx: %w", err)
	}
	return oldValue.Tx, nil
}

// ResetTx resets all changes to the "tx" field.
func (m *StakeMutation) ResetTx() {
	m.tx = nil
}

// SetStart sets the "start" field.
func (m *StakeMutation) SetStart(i int64) {
	m.start = &i
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *StakeMutation) Start() (r int64, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldStart(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds i to the "start" field.
func (m *StakeMutation) AddStart(i int64) {
	if m.addstart != nil {
		*m.addstart += i
	} else {
		m.addstart = &i
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *StakeMutation) AddedStart() (r int64, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *StakeMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetDuration sets the "duration" field.
func (m *StakeMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *StakeMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *StakeMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *StakeMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *StakeMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetAmount sets the "amount" field.
func (m *StakeMutation) SetAmount(i int64) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *StakeMutation) Amount() (r int64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldAmount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *StakeMutation) AddAmount(i int64) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *StakeMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *StakeMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetRewardReceiver sets the "reward_receiver" field.
func (m *StakeMutation) SetRewardReceiver(s string) {
	m.reward_receiver = &s
}

// RewardReceiver returns the value of the "reward_receiver" field in the mutation.
func (m *StakeMutation) RewardReceiver() (r string, exists bool) {
	v := m.reward_receiver
	if v == nil {
		return
	}
	return *v, true
}

// OldRewardReceiver returns the old "reward_receiver" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldRewardReceiver(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRewardReceiver is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRewardReceiver requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRewardReceiver: %w", err)
	}
	return oldValue.RewardReceiver, nil
}

// ResetRewardReceiver resets all changes to the "reward_receiver" field.
func (m *StakeMutation) ResetRewardReceiver() {
	m.reward_receiver = nil
}

// SetEnd sets the "end" field.
func (m *StakeMutation) SetEnd(b bool) {
	m.end = &b
}

// End returns the value of the "end" field in the mutation.
func (m *StakeMutation) End() (r bool, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the Stake entity.
// If the Stake object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StakeMutation) OldEnd(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// ResetEnd resets all changes to the "end" field.
func (m *StakeMutation) ResetEnd() {
	m.end = nil
}

// Where appends a list predicates to the StakeMutation builder.
func (m *StakeMutation) Where(ps ...predicate.Stake) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StakeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StakeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Stake, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StakeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StakeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Stake).
func (m *StakeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StakeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.staker != nil {
		fields = append(fields, stake.FieldStaker)
	}
	if m.tx != nil {
		fields = append(fields, stake.FieldTx)
	}
	if m.start != nil {
		fields = append(fields, stake.FieldStart)
	}
	if m.duration != nil {
		fields = append(fields, stake.FieldDuration)
	}
	if m.amount != nil {
		fields = append(fields, stake.FieldAmount)
	}
	if m.reward_receiver != nil {
		fields = append(fields, stake.FieldRewardReceiver)
	}
	if m.end != nil {
		fields = append(fields, stake.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StakeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stake.FieldStaker:
		return m.Staker()
	case stake.FieldTx:
		return m.GetTx()
	case stake.FieldStart:
		return m.Start()
	case stake.FieldDuration:
		return m.Duration()
	case stake.FieldAmount:
		return m.Amount()
	case stake.FieldRewardReceiver:
		return m.RewardReceiver()
	case stake.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StakeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stake.FieldStaker:
		return m.OldStaker(ctx)
	case stake.FieldTx:
		return m.OldTx(ctx)
	case stake.FieldStart:
		return m.OldStart(ctx)
	case stake.FieldDuration:
		return m.OldDuration(ctx)
	case stake.FieldAmount:
		return m.OldAmount(ctx)
	case stake.FieldRewardReceiver:
		return m.OldRewardReceiver(ctx)
	case stake.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown Stake field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StakeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stake.FieldStaker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStaker(v)
		return nil
	case stake.FieldTx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTx(v)
		return nil
	case stake.FieldStart:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case stake.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case stake.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case stake.FieldRewardReceiver:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRewardReceiver(v)
		return nil
	case stake.FieldEnd:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Stake field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StakeMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, stake.FieldStart)
	}
	if m.addduration != nil {
		fields = append(fields, stake.FieldDuration)
	}
	if m.addamount != nil {
		fields = append(fields, stake.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StakeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stake.FieldStart:
		return m.AddedStart()
	case stake.FieldDuration:
		return m.AddedDuration()
	case stake.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StakeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stake.FieldStart:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case stake.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case stake.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Stake numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StakeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StakeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StakeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Stake nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StakeMutation) ResetField(name string) error {
	switch name {
	case stake.FieldStaker:
		m.ResetStaker()
		return nil
	case stake.FieldTx:
		m.ResetTx()
		return nil
	case stake.FieldStart:
		m.ResetStart()
		return nil
	case stake.FieldDuration:
		m.ResetDuration()
		return nil
	case stake.FieldAmount:
		m.ResetAmount()
		return nil
	case stake.FieldRewardReceiver:
		m.ResetRewardReceiver()
		return nil
	case stake.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown Stake field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StakeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StakeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StakeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StakeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StakeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StakeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StakeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Stake unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StakeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Stake edge %s", name)
}
